package com.dreambox.csv;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.dreambox.csv.GenCsvTypes;
import com.intellij.psi.TokenType;

%%

%class CsvLexer
%implements FlexLexer
%unicode
%function advance
%type IElementType
%eof{  return;
%eof}

CRLF=\R
//WHITE_SPACE=[\ \n\t\f]
//FIRST_VALUE_CHARACTER=[^ \n\f\\] | "\\"{CRLF} | "\\".
//VALUE_CHARACTER=[^\n\f\\] | "\\"{CRLF} | "\\".
//END_OF_LINE_COMMENT=("#"|"!")[^\r\n]*
//SEPARATOR=[:=]
//KEY_CHARACTER=[^:=\ \n\t\f\\] | "\\ "

CSV_VALUE=[abc]*
CSV_COMMA=,
//CSV_START=\n

//%state WAITING_VALUE

%%

<YYINITIAL> {CSV_VALUE}                           { yybegin(YYINITIAL);       return CsvTypes.VALUE; }
<YYINITIAL> {CSV_COMMA}                           { yybegin(YYINITIAL);       return CsvTypes.COMMA; }
<YYINITIAL>  {CRLF}                               { yybegin(YYINITIAL);       return CsvTypes.CRLF; }
.                                                 {                           return TokenType.BAD_CHARACTER; }

/*

<YYINITIAL> {END_OF_LINE_COMMENT}                           { yybegin(YYINITIAL);       return SimpleTypes.COMMENT; }

<YYINITIAL> {KEY_CHARACTER}+                                { yybegin(YYINITIAL);       return SimpleTypes.KEY; }

<YYINITIAL> {SEPARATOR}                                     { yybegin(WAITING_VALUE);   return SimpleTypes.SEPARATOR; }

<WAITING_VALUE> {CRLF}({CRLF}|{WHITE_SPACE})+               { yybegin(YYINITIAL);       return TokenType.WHITE_SPACE; }

<WAITING_VALUE> {WHITE_SPACE}+                              { yybegin(WAITING_VALUE);   return TokenType.WHITE_SPACE; }

<WAITING_VALUE> {FIRST_VALUE_CHARACTER}{VALUE_CHARACTER}*   { yybegin(YYINITIAL);       return SimpleTypes.VALUE; }

({CRLF}|{WHITE_SPACE})+                                     { yybegin(YYINITIAL);       return TokenType.WHITE_SPACE; }

*/
